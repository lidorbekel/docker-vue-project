name: Docker CI CD Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: 'public'
    - name: Build and tag image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: t6p6b9i9
        REPOSITORY: lidor-web-project
        IMAGE_TAG: latest
      run: |
        docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
    - name: push docker image to Amazon ECR Public
      if: github.event_name != 'pull_request'
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: t6p6b9i9
        REPOSITORY: lidor-web-project
        IMAGE_TAG: latest
      run: |
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
        
  deploy-docker-image:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    - name: get instance id
      if: github.event_name != 'pull_request'
      id: get-instance-id
      uses: unfor19/install-aws-cli-action@master
    - run: |
        instance_id=$(aws ec2 describe-instances --region eu-west-1 --filters Name=instance-state-name,Values=running Name=tag:Name,Values=lidor-web-demo --query 'Reservations[].Instances[].InstanceId' --output text)
        echo "instance_id=$instance_id" >> $GITHUB_ENV
      shell: bash
    
    - name: Deployment - AWS SSM Send-Command 
      if: github.event_name != 'pull_request'
      uses: peterkimzz/aws-ssm-send-command@master
      id: ssm
      with:
        aws-region: eu-west-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        instance-ids: ${{ env.instance_id }}
        working-directory: /persistent
        command: docker-compose down && docker-compose pull && docker-compose up -d
        comment: Happy Composing !

    # Catch SSM outputs
    - name: Get the outputs
      if: github.event_name != 'pull_request'
      run: echo "The Command id is ${{ steps.ssm.outputs.command-id }}"
      
      
      
